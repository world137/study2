from math import sqrt
MAX = 1000000.0

def dist(p1,p2):
    return sqrt((p1[0] - p2[0])*(p1[0] - p2[0]) + (p1[1] - p2[1])*(p1[1] - p2[1])) #หาระยะห่างระหว่างจุด

def cost(points, i, j, k):
    p1 = points[i]
    p2 = points[j] 
    p3 = points[k] 
    return dist(p1, p2) + dist(p2, p3) + dist(p3, p1)

def mTCDP(points, n): #ไล่ทีละตำแหน่งตามเส้นทแยงมุม
    arr = []
    arr2 = []
    if (n < 3):
        return 0
    table=[[0 for x in range(n)] for x in range(n)]
    pointer=0 #เก็บค่าไว้เริ่มต้นให้กับ j
    while(pointer<n):
        i=0 
        j=pointer
        while(j<n):
            if j<i+2: #เป็นจุดประชิดหรือเป็นตัวมันเองหรือไม่
                table[i][j]=0 
            else:
                table[i][j]=MAX
                k=i+1 # k = จุดระหว่าง i กับ j
                while k<j: # วนดูค่าว่าเส้นรอบรูปที่ k ถ้าน้อยกว่าเก็บใส่ตาราง
                    val = table[i][k] + table[k][j] + cost(points,i,j,k)
                    if table[i][j] > val:
                        table[i][j] = val 
                        arr2.append(k)
                    k+=1
                arr.append(table[i][j])
            i+=1
            j+=1 #บวก 1 ทั้งคู่ ==> ขวาล่าง
        pointer+=1 # เลื่อนตำแหน่งเริ่มต้น j
    print(arr)
    # print(arr2)
    return table[0][n-1]

# points = [[1, 2],[4, 3],[5, 7],[3, 10],[0 ,7]] #1.1
# points = [[-5.5, -2],[4, 0],[15, 7],[2, 10],[-3, 6]] #1.2
# points = [[1, 0],[4, 3],[5, 7],[1, 10],[0, 8],[0, 0]] #2.1
# points = [[2.5, 0],[4, 3],[5, 8],[2.5, 10],[0, 6.3],[1.5, 0]] #2.2
# points = [[-2, 3],[-4, 6],[3, 5],[1, 3]] #3
# points = [[0, 0],[2, 1],[0, 2],[1, 0],[1, 2]]
'''
points =[[11.9992, 10.0289],[11.9034, 10.307],[11.8652, 10.361],[11.8359, 10.3967],[11.835, 10.3977],
[11.6534, 10.5626],[11.5229, 10.6482],[11.4751, 10.6753],[11.4467, 10.6905],
[11.3934, 10.7174],[11.3774, 10.725],[11.3246, 10.7492],[11.1941, 10.8022],
[11.1518, 10.8175],[11.1016, 10.8346],[10.9997, 10.8661],
[10.9982, 10.8665],[10.9419, 10.8822],[10.7921, 10.9182],[10.3781, 10.982],
[10.3005, 10.9886],[10.1672, 10.9965],[10.1279, 10.998],
[10.1106, 10.9985],[10.0963, 10.9988],[10.0735, 10.9993],
[9.9653, 10.9998],[9.8676, 10.9978],[9.6322, 10.9829],[9.6181, 10.9816],
[9.6162, 10.9814],[9.3724, 10.9495],[9.3035, 10.9374],[9.2529, 10.9276],
[9.2345, 10.9239],[9.102, 10.8935],[8.884, 10.8298],
[8.7659, 10.7869],[8.6288, 10.728],[8.4843, 10.6525],[8.2345, 10.4698],
[8.2094, 10.4455],[8.1782, 10.4127],[8.1129, 10.3313],[8.0518, 10.2261],
[8.0437, 10.2079],[8.0217, 10.1467],[8.0083, 10.0911],[8.008, 10.0893],
[8.0013, 10.0357],[8.001, 10.0312],[8.0022, 9.9532],[8.0031, 9.9442],
[8.0184, 9.8647],[8.0405, 9.7998],[8.0521, 9.7732],[8.1479, 9.6226],
[8.1592, 9.609],[8.2512, 9.5148],[8.2518, 9.5142],[8.3293, 9.4503],[8.367, 9.4227],[8.4774, 9.3516],
[8.4806, 9.3498],[8.4968, 9.3404],[8.5127, 9.3315],[8.8275, 9.1899],[9.0866, 9.1104],[9.2741, 9.0682],
[9.2857, 9.066],[9.3022, 9.0628],[9.376, 9.0499],[9.6176, 9.0185],[9.8237, 9.0039],[9.8952, 9.0014],
[9.9985, 9],[10.1258, 9.002],[10.1371, 9.0024],[10.1464, 9.0027],[10.2604, 9.0085],[10.2914, 9.0107],
[10.4227, 9.0226],[10.4897, 9.0304],[10.581, 9.0431],[10.6344, 9.0516],[10.9176, 9.1115],
[11.164, 9.1868],[11.2074, 9.2028],[11.2765, 9.2302],[11.3068, 9.243],
[11.3756, 9.2741],[11.4957, 9.3361],[11.5929, 9.3953],[11.6387, 9.4267],[11.6446, 9.431],[11.7428, 9.5095],
[11.7476, 9.5137],[11.7743, 9.5385],[11.9444, 9.7659],[11.9787, 9.8546]]
'''
points = [[0,0],[1, 0],[2, 0],[3, 0],
[4, 0],[5, 0],[6, 0],[7, 0],[8, 0],
[9, 0],[10, 0],[11, 0],[12, 0],[12, 1],
[12, 2],[12, 3],[12, 4],[12, 5],[12, 6],
[12, 7],[12, 8],[12, 9],[12, 10],[12, 11],[12, 12],
[11, 12],[10, 12],[9, 12],[8, 12],[7, 12],[6, 12],
[5, 12],[4, 12],[3, 12],[2, 12],[1, 12],[0, 12],[0, 11]
,[0, 10],[0, 9],[0, 8],[0, 7],[0, 6],[0, 5],[0, 4],[0, 3],[0, 2],[0, 1]]
n = len(points)
print(round(mTCDP(points,n),4))
